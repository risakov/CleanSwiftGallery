//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.font` struct is generated, and contains static references to 12 fonts.
  struct font: Rswift.Validatable {
    /// Font `Roboto-BlackItalic`.
    static let robotoBlackItalic = Rswift.FontResource(fontName: "Roboto-BlackItalic")
    /// Font `Roboto-Black`.
    static let robotoBlack = Rswift.FontResource(fontName: "Roboto-Black")
    /// Font `Roboto-BoldItalic`.
    static let robotoBoldItalic = Rswift.FontResource(fontName: "Roboto-BoldItalic")
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Italic`.
    static let robotoItalic = Rswift.FontResource(fontName: "Roboto-Italic")
    /// Font `Roboto-LightItalic`.
    static let robotoLightItalic = Rswift.FontResource(fontName: "Roboto-LightItalic")
    /// Font `Roboto-Light`.
    static let robotoLight = Rswift.FontResource(fontName: "Roboto-Light")
    /// Font `Roboto-MediumItalic`.
    static let robotoMediumItalic = Rswift.FontResource(fontName: "Roboto-MediumItalic")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")
    /// Font `Roboto-ThinItalic`.
    static let robotoThinItalic = Rswift.FontResource(fontName: "Roboto-ThinItalic")
    /// Font `Roboto-Thin`.
    static let robotoThin = Rswift.FontResource(fontName: "Roboto-Thin")
    
    /// `UIFont(name: "Roboto-Black", size: ...)`
    static func robotoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlack, size: size)
    }
    
    /// `UIFont(name: "Roboto-BlackItalic", size: ...)`
    static func robotoBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlackItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }
    
    /// `UIFont(name: "Roboto-BoldItalic", size: ...)`
    static func robotoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Italic", size: ...)`
    static func robotoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Light", size: ...)`
    static func robotoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLight, size: size)
    }
    
    /// `UIFont(name: "Roboto-LightItalic", size: ...)`
    static func robotoLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLightItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }
    
    /// `UIFont(name: "Roboto-MediumItalic", size: ...)`
    static func robotoMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMediumItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }
    
    /// `UIFont(name: "Roboto-Thin", size: ...)`
    static func robotoThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThin, size: size)
    }
    
    /// `UIFont(name: "Roboto-ThinItalic", size: ...)`
    static func robotoThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThinItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.robotoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Black' could not be loaded, is 'Roboto-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BlackItalic' could not be loaded, is 'Roboto-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BoldItalic' could not be loaded, is 'Roboto-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Italic' could not be loaded, is 'Roboto-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Light' could not be loaded, is 'Roboto-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-LightItalic' could not be loaded, is 'Roboto-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-MediumItalic' could not be loaded, is 'Roboto-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Thin' could not be loaded, is 'Roboto-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-ThinItalic' could not be loaded, is 'Roboto-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 12 images.
  struct image {
    /// Image `Dictation`.
    static let dictation = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dictation")
    /// Image `Edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "Edit")
    /// Image `ErrorIcon`.
    static let errorIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ErrorIcon")
    /// Image `Glyph`.
    static let glyph = Rswift.ImageResource(bundle: R.hostingBundle, name: "Glyph")
    /// Image `Save`.
    static let save = Rswift.ImageResource(bundle: R.hostingBundle, name: "Save")
    /// Image `chevronleft`.
    static let chevronleft = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevronleft")
    /// Image `logo2`.
    static let logo2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo2")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `photoplaceholder`.
    static let photoplaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "photoplaceholder")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `tabthree`.
    static let tabthree = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabthree")
    /// Image `tabtwo`.
    static let tabtwo = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabtwo")
    
    /// `UIImage(named: "Dictation", bundle: ..., traitCollection: ...)`
    static func dictation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dictation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ErrorIcon", bundle: ..., traitCollection: ...)`
    static func errorIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.errorIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Glyph", bundle: ..., traitCollection: ...)`
    static func glyph(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.glyph, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Save", bundle: ..., traitCollection: ...)`
    static func save(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.save, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chevronleft", bundle: ..., traitCollection: ...)`
    static func chevronleft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronleft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo2", bundle: ..., traitCollection: ...)`
    static func logo2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "photoplaceholder", bundle: ..., traitCollection: ...)`
    static func photoplaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoplaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabthree", bundle: ..., traitCollection: ...)`
    static func tabthree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabthree, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabtwo", bundle: ..., traitCollection: ...)`
    static func tabtwo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabtwo, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `StubView`.
    static let stubView = _R.nib._StubView()
    
    /// `UINib(name: "StubView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.stubView) instead")
    static func stubView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.stubView)
    }
    
    static func stubView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CleanSwiftGallery.StubView? {
      return R.nib.stubView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CleanSwiftGallery.StubView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `imageCell`.
    static let imageCell: Rswift.ReuseIdentifier<CleanSwiftGallery.ImageCell> = Rswift.ReuseIdentifier(identifier: "imageCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `Detail`.
    static let detail = _R.storyboard.detail()
    /// Storyboard `EditProfile`.
    static let editProfile = _R.storyboard.editProfile()
    /// Storyboard `Images`.
    static let images = _R.storyboard.images()
    /// Storyboard `Launch`.
    static let launch = _R.storyboard.launch()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `NewPhoto`.
    static let newPhoto = _R.storyboard.newPhoto()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `TabBar`.
    static let tabBar = _R.storyboard.tabBar()
    
    /// `UIStoryboard(name: "Detail", bundle: ...)`
    static func detail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.detail)
    }
    
    /// `UIStoryboard(name: "EditProfile", bundle: ...)`
    static func editProfile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.editProfile)
    }
    
    /// `UIStoryboard(name: "Images", bundle: ...)`
    static func images(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.images)
    }
    
    /// `UIStoryboard(name: "Launch", bundle: ...)`
    static func launch(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launch)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "NewPhoto", bundle: ...)`
    static func newPhoto(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newPhoto)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "TabBar", bundle: ...)`
    static func tabBar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tabBar)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _StubView.validate()
    }
    
    struct _StubView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StubView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CleanSwiftGallery.StubView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CleanSwiftGallery.StubView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ErrorIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ErrorIcon' is used in nib 'StubView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try detail.validate()
      try editProfile.validate()
      try images.validate()
      try launch.validate()
      try login.validate()
      try newPhoto.validate()
      try profile.validate()
      try tabBar.validate()
    }
    
    struct detail: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let detailStoryboard = StoryboardViewControllerResource<DetailViewController>(identifier: "detailStoryboard")
      let name = "Detail"
      
      func detailStoryboard(_: Void = ()) -> DetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailStoryboard)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.detail().detailStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailStoryboard' could not be loaded from storyboard 'Detail' as 'DetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct editProfile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let editProfileViewController = StoryboardViewControllerResource<EditProfileViewController>(identifier: "editProfileViewController")
      let name = "EditProfile"
      
      func editProfileViewController(_: Void = ()) -> EditProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.editProfile().editProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileViewController' could not be loaded from storyboard 'EditProfile' as 'EditProfileViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct images: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let imagesViewController = StoryboardViewControllerResource<CleanSwiftGallery.ImagesViewController>(identifier: "imagesViewController")
      let name = "Images"
      
      func imagesViewController(_: Void = ()) -> CleanSwiftGallery.ImagesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imagesViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.images().imagesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imagesViewController' could not be loaded from storyboard 'Images' as 'CleanSwiftGallery.ImagesViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launch: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LaunchViewController
      
      let bundle = R.hostingBundle
      let launchViewController = StoryboardViewControllerResource<LaunchViewController>(identifier: "launchViewController")
      let name = "Launch"
      
      func launchViewController(_: Void = ()) -> LaunchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: launchViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Launch', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.launch().launchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'launchViewController' could not be loaded from storyboard 'Launch' as 'LaunchViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let firstNavigationViewController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "firstNavigationViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "loginViewController")
      let name = "Login"
      
      func firstNavigationViewController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: firstNavigationViewController)
      }
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Login', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.login().firstNavigationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'firstNavigationViewController' could not be loaded from storyboard 'Login' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct newPhoto: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NewPhoto"
      let newPhotoViewController = StoryboardViewControllerResource<CleanSwiftGallery.NewPhotoViewController>(identifier: "newPhotoViewController")
      
      func newPhotoViewController(_: Void = ()) -> CleanSwiftGallery.NewPhotoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newPhotoViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "photoplaceholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photoplaceholder' is used in storyboard 'NewPhoto', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.newPhoto().newPhotoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newPhotoViewController' could not be loaded from storyboard 'NewPhoto' as 'CleanSwiftGallery.NewPhotoViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct profile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Profile"
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "profileViewController")
      
      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.profile().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct tabBar: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CleanSwiftGallery.TabBarController
      
      let bundle = R.hostingBundle
      let name = "TabBar"
      let tabBarStoryboard = StoryboardViewControllerResource<CleanSwiftGallery.TabBarController>(identifier: "tabBarStoryboard")
      
      func tabBarStoryboard(_: Void = ()) -> CleanSwiftGallery.TabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBarStoryboard)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Glyph", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Glyph' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabthree", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabthree' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabtwo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabtwo' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.tabBar().tabBarStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBarStoryboard' could not be loaded from storyboard 'TabBar' as 'CleanSwiftGallery.TabBarController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
